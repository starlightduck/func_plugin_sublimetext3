%YAML 1.2

file_extensions:
  - fc
  - fcp
scope: source.func
contexts:

  ##########################################################################################################
  ###########################################    Main context    ###########################################
  ##########################################################################################################

  main:
  ############################################### Comments #################################################
    # Multiline comment
    - include: start_of_lines_comment
    # One-line comments
    - match: ';;'
      scope: punctuation.definition.comment.func
      push: line_comment

  ############################################### Strings  #################################################
    - match: '"'
      scope: punctuation.definition.string.begin.func
      push: double_quoted_string

  ############################################### Staples  #################################################
    # Regular brackets
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.illegal.stray-bracket-end.func
    # Curly brackets
    - match: \{
      push: curly_brackets
    - match: \}
      scope: invalid.illegal.stray-bracket-end.func
    # Square brackets
    - match: \[
      push: square_brackets
    - match: \]
      scope: invalid.illegal.stray-bracket-end.func

  ############################################### Keywords #################################################
    - match: '\b((else)?if(not)?|while|do|repeat|until|asm|return|impure|inline(_ref)?|method_id|forall)\b'
      scope: keyword.control.func

    - match: '\b(true|false)\b'
      scope: entity.name.func

    - match: '[+\-*/=:<>~?&|^\.,!]'
      scope: keyword.operator.func

  ########################################## Std.lib functions #############################################
    - match: '\b(null|impure_touch|now|my_address|get_balance|(cur|block)_lt|bless)\b'
      scope: support.function.builtin.func

    - match: '\b((un)?(cons|single|pair|triple|tuple4))\b'
      scope: support.function.builtin.func

    - match: '\b(list|next|car|cdr|empty_tuple|tpush)\b'
      scope: support.function.builtin.func

    - match: '\b((pair_|triple_|)(first|second|third|fourth))\b'
      scope: support.function.builtin.func

    - match: '\b((cell|slice|string)_hash|(slice_)?compute_data_size)\b'
      scope: support.function.builtin.func

    - match: '\b(get_(data|c3)|(begin|end)_parse)\b'
      scope: support.function.builtin.func

    - match: '\b(min|max|minmax|abs)\b'
      scope: support.function.builtin.func

    - match: '\b(((pre)?load|store)_(ref|u?int|bits|dict))\b'
      scope: support.function.builtin.func    

    - match: '\b(load_grams|skip_(last_)?bits|first_bits|slice_last|skip_dict)\b'
      scope: support.function.builtin.func    

    - match: '\b(((pre)?load|store)_maybe_ref)|(cell|slice|builder)_depth\b'
      scope: support.function.builtin.func    

    - match: '\b(slice_(refs|bits|bits_refs|(data_|refs_|)empty))\b'
      scope: support.function.builtin.func    

    - match: '\b(builder_(refs|bits|depth)|(begin|end)_cell|store_(slice|grams))\b'
      scope: support.function.builtin.func

    - match: '\b((load_msg|parse(_std|_var|))_addr|dict_get)\b'
      scope: support.function.builtin.func

    - match: '\b([iu]dict_([gs]et|set_get)(_ref)?)\b'
      scope: support.function.builtin.func

    - match: '\b([iu]?dict_(set|add|replace)(_builder)?)\b'
      scope: support.function.builtin.func

    - match: '\b([iu]?dict(_|::)delete(_get(_min|_max)?)?)\b'
      scope: support.function.builtin.func

    - match: '\b([iu]dict_get_((min|max)(_ref)?|(next|prev)(eq)?))\b'
      scope: support.function.builtin.func

    - match: '\b(new_dict|dict_empty|pfxdict_([gs]et|delete)|config_param|cell_null)\b'
      scope: support.function.builtin.func

    - match: '\b(rand(om)?|[gs]et_seed|randomize(_lt)?)\b'
      scope: support.function.builtin.func

  ###############################################  Types   #################################################
    - match: '\b(builder|slice|cell|int|tuple|cont|var|_|~)\b'
      scope: storage.type.func

  ############################################### Numbers  #################################################
    - match: '\b[-+]?[0-9A-Z]+[.,]?([0-9A-Z]|[0-9a-z])*\b'
      scope: constant.numeric.func

  ############################################### Preprocessor  ############################################
    - match: '^#[a-z]+'
      scope: entity.other.inherited-class.func

  ############################################### Important stuff ##########################################
    - match: '\b(recv_internal|recv_external|asm|throw(_unless|_if|)|dump_stack|accept_message|commit|set_gas_limit|buy_gas)\b'
      scope: constant.language.func

    - match: '\b(raw_reserve(_extra)?|send_raw_message|dump|run_method[0-3]|set_(code|data|c3)|check_(data_)?signature)\b'
      scope: constant.language.func

    # Best practices
    - match: '\b(store_data|send_message(_back)?)\b'
      scope: entity.name.tag.func

  ##########################################################################################################
  ########################################### Secondary contexts ###########################################
  ##########################################################################################################


  ############################################### Strings  #################################################
  double_quoted_string:
    - meta_scope: string.quoted.double.func
    - match: '"'
      scope: punctuation.definition.string.end.func
      pop: true

  ############################################### Staples  #################################################

  brackets:
    # Regular brackets
    - match: \)
      pop: true
    - include: main

  curly_brackets:
    # Curly brackets
    - match: \}
      pop: true
    - include: main
  square_brackets:
    # Square brackets
    - match: \]
      pop: true
    - include: main

  ############################################### Comments #################################################
  start_of_lines_comment:
    # Multiline comment START
    - match: '{-'
      push: finish_of_lines_comment

  finish_of_lines_comment:
    # Multiline comment FINISH
    - include: start_of_lines_comment
    - meta_scope: comment.block.func
    - match: '-}'
      pop: true

  line_comment:
    # One-line comments
    - meta_scope: comment.line.func
    - match: $
      pop: true